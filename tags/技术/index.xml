<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>技术 on 飞光</title>
    <link>https://rjguanwen.cn/tags/%E6%8A%80%E6%9C%AF/</link>
    <description>Recent content in 技术 on 飞光</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 23 Mar 2022 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://rjguanwen.cn/tags/%E6%8A%80%E6%9C%AF/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>读书 - 《数据资产论》</title>
      <link>https://rjguanwen.cn/2022/03/sjzcl01/</link>
      <pubDate>Wed, 23 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://rjguanwen.cn/2022/03/sjzcl01/</guid>
      <description>读书笔记 - 《数据资产论》 根据会计学的定义，资源要成为资产有一个必要条件：带来预期的经济收益。由此，不是所有的数据都可以称为资产，只有那些能够</description>
    </item>
    
    <item>
      <title>Gin 表单与文件上传</title>
      <link>https://rjguanwen.cn/2022/03/gin_03/</link>
      <pubDate>Tue, 08 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://rjguanwen.cn/2022/03/gin_03/</guid>
      <description>表单参数 表单传输为 POST 请求，http 常见的传输格式为四种： - application/json - application/x-www-form-urlencoded - application/xml - multipart/form-data 表单参数可以通过 PostForm() 方法获取，该方法默认解析的是 x-www-form-urlencoded 或 form-data 格式的参数。 简单</description>
    </item>
    
    <item>
      <title>Gin 路由</title>
      <link>https://rjguanwen.cn/2021/09/gin_02/</link>
      <pubDate>Thu, 16 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://rjguanwen.cn/2021/09/gin_02/</guid>
      <description>路由 核心功能 路由系统可根据请求方法、请求路径和路径参数来识别转发 可设置一个或者多个中间件用于在请求处理器前后处理特殊的事件 可以分组设置，将一</description>
    </item>
    
    <item>
      <title>hugo 常用命令</title>
      <link>https://rjguanwen.cn/2021/07/hugo_cmd/</link>
      <pubDate>Fri, 30 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://rjguanwen.cn/2021/07/hugo_cmd/</guid>
      <description>常用命令 #使用方法: hugo hugo [flags] hugo [command] hugo [command] [flags] #查看版本 hugo version #版本和环境详细信息 hugo env #创建新站点 hugo new site &amp;quot;$mysite&amp;quot; #创建文章 hugo new index.md 在content/文件夹可以看</description>
    </item>
    
    <item>
      <title>rasa 入门</title>
      <link>https://rjguanwen.cn/2021/07/rasa-1/</link>
      <pubDate>Fri, 30 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://rjguanwen.cn/2021/07/rasa-1/</guid>
      <description>前言：没有比官网文档更好的资料了。看这里https://rasa.com/docs/rasa/ rasa 安装 pip install -U rasa pip show rasa 注：我是用的 rasa 版本为 Version: 2.8.1 初</description>
    </item>
    
    <item>
      <title>rasa 继续入门 - 语言模型与分词器</title>
      <link>https://rjguanwen.cn/2021/07/rasa-2/</link>
      <pubDate>Fri, 30 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://rjguanwen.cn/2021/07/rasa-2/</guid>
      <description>rasa 支持多种语言模型与分词器，语言模型常用的有 MITIENLP 和 SpaCyNLP，分词器常用的有 WhitespaceTokenizer、JiebaToken</description>
    </item>
    
    <item>
      <title>Anaconda 虚拟环境基础操作</title>
      <link>https://rjguanwen.cn/2021/02/python-1/</link>
      <pubDate>Thu, 04 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://rjguanwen.cn/2021/02/python-1/</guid>
      <description>Anaconda 虚拟环境基础操作 创建 创建的同时可以同时指定安装必要的包： conda create -n &amp;lt;虚拟环境名&amp;gt; [包名1 包名2 包名3] python=3.6 激活虚拟环境 Linux: source activate &amp;lt;</description>
    </item>
    
    <item>
      <title>Apache Superset 简介</title>
      <link>https://rjguanwen.cn/2021/01/superset_01/</link>
      <pubDate>Sat, 30 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://rjguanwen.cn/2021/01/superset_01/</guid>
      <description>Apache Superset 简介 概要信息 项目 说明 官网 https://superset.apache.org/ 开源/闭源 开源 源码管理地址 https://github.com/apache/incubator-superset/wiki License类别 Mozilla Public License 2.0 开发语言 GO 操作系统支持 跨平台，支持多种操作系统 主要特性 Apache</description>
    </item>
    
    <item>
      <title>Apache Ignite 实践记录</title>
      <link>https://rjguanwen.cn/2021/01/ignite_02/</link>
      <pubDate>Tue, 12 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://rjguanwen.cn/2021/01/ignite_02/</guid>
      <description>Apache Ignite 实践记录 使用 Docker 安装 基于 win10 WSL2(Ubuntu) 创建本地目录 mkdir ignite_dir 使用本地目录启动持久化集群 docker run -d \ -v ${PWD}/ignite_dir:/storage \ -e IGNITE_WORK_DIR=/storage \ apacheignite/ignite:2.9.0 使用自定义配置文件 通过 URI 传递配置文件 docker run -d \ -e</description>
    </item>
    
    <item>
      <title>win10 的 Linux 子系统中安装 docker</title>
      <link>https://rjguanwen.cn/2021/01/docker_wsl/</link>
      <pubDate>Tue, 05 Jan 2021 00:00:00 +0000</pubDate>
      
      <guid>https://rjguanwen.cn/2021/01/docker_wsl/</guid>
      <description>在 win10 的 Linux 子系统中实现 docker 的安装使用 1、安装 WSL2 此处注意，一定是 WSL2！wsl 坑太多，经常有莫名错误！ 1. 配置 WSL2 开启WSL 以管理员运行 Powers</description>
    </item>
    
    <item>
      <title>Apache Ignite 简介</title>
      <link>https://rjguanwen.cn/2020/12/ignite_01/</link>
      <pubDate>Mon, 28 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://rjguanwen.cn/2020/12/ignite_01/</guid>
      <description>Apache Ignite 简介 待完善</description>
    </item>
    
    <item>
      <title>Windows 更新 git 版本</title>
      <link>https://rjguanwen.cn/2020/09/git_04/</link>
      <pubDate>Thu, 17 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://rjguanwen.cn/2020/09/git_04/</guid>
      <description>1、查看当前安装的 git 版本 git --version 2、更新 git 版本是 2.17.1 之前的： git update git 版本是 2.17.1 之后的： git update-git-for-windows 3、如出现错误 重新下载新版本安装包，覆盖安装即可：https</description>
    </item>
    
    <item>
      <title>Go 文件操作</title>
      <link>https://rjguanwen.cn/2020/08/go_file/</link>
      <pubDate>Thu, 27 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://rjguanwen.cn/2020/08/go_file/</guid>
      <description>&amp;lt;部分内容借鉴自网络，如有侵权，预先道歉，请及时联系（rjguanwen001@163.com），我会尽快删除，谢谢！&amp;gt; Go 文件操</description>
    </item>
    
    <item>
      <title>Gin Quickstart</title>
      <link>https://rjguanwen.cn/2020/06/gin_01/</link>
      <pubDate>Sat, 13 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://rjguanwen.cn/2020/06/gin_01/</guid>
      <description>Gin 使基于 go 语言的一个 web 框架，接口简洁，封装比较优雅，性能表现很好。 Gin 特性 快速：路由不使用反射，基于Radix树，内存占用少。 中间件：HTTP</description>
    </item>
    
    <item>
      <title>Docker常用命令</title>
      <link>https://rjguanwen.cn/2020/06/docker_01/</link>
      <pubDate>Fri, 05 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://rjguanwen.cn/2020/06/docker_01/</guid>
      <description>Redis 常用命令，备查！ 1、测试 Docker 是否正常安装 docker run hello-world 2、Docker 状态信息查看 docker info 3、Docker 镜像管理 3.1 创建镜像 方法一：根据 Dockerfile 创建镜像 创建D</description>
    </item>
    
    <item>
      <title>Redis 常用命令</title>
      <link>https://rjguanwen.cn/2020/06/redis_01/</link>
      <pubDate>Fri, 05 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://rjguanwen.cn/2020/06/redis_01/</guid>
      <description>Redis 常用命令，备查！ &amp;lt;部分内容摘抄自网络，如有侵权，预先道歉，请及时联系（rjguanwen001@163.com），我会尽快删除，谢谢</description>
    </item>
    
    <item>
      <title>架构决策记录（ADR）</title>
      <link>https://rjguanwen.cn/2020/02/adr/</link>
      <pubDate>Sat, 29 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://rjguanwen.cn/2020/02/adr/</guid>
      <description>什么是ADR ADR（Architecture Decision Records）即架构决策记录。 架构决策（AD）是一种软件设计选择，针对功能性或非功能性的需求</description>
    </item>
    
    <item>
      <title>Centrifugo（九）使用 Redis 实现伸缩</title>
      <link>https://rjguanwen.cn/2019/12/centrifugo_09/</link>
      <pubDate>Tue, 31 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://rjguanwen.cn/2019/12/centrifugo_09/</guid>
      <description>&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;Centrifugo 服务器支持多节点部署，并支持对客户端请求的负载均衡。本文中，我们将启动三个 Centrifugo 服务节点来进行演示，这些节点通过 Redis 互相连接。为了达到这个目的，</description>
    </item>
    
    <item>
      <title>Centrifugo（十）令牌和签名</title>
      <link>https://rjguanwen.cn/2019/12/centrifugo_10/</link>
      <pubDate>Tue, 31 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://rjguanwen.cn/2019/12/centrifugo_10/</guid>
      <description>Centrifugo 使用具有 SHA-256 摘要算法的 HMAC（Hash-based Message Authentication Code）来创建连接令牌以及对数据进行签名。 &amp;ensp;&amp;ensp;&amp;ensp;&amp;e</description>
    </item>
    
    <item>
      <title>Centrifugo（八）连接检查</title>
      <link>https://rjguanwen.cn/2019/12/centrifugo_08/</link>
      <pubDate>Sun, 29 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://rjguanwen.cn/2019/12/centrifugo_08/</guid>
      <description>&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;当客户端使用适当的凭据连接到 Centrifugo 后，连接是一直存在的，哪怕你在应用程序中禁止了该用户，他也能从</description>
    </item>
    
    <item>
      <title>常用 Git 命令清单</title>
      <link>https://rjguanwen.cn/2019/12/git_03/</link>
      <pubDate>Fri, 20 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://rjguanwen.cn/2019/12/git_03/</guid>
      <description>经常记不住 Git 命令，备查！ 本篇博客是转发的别人的，原文地址：http://www.ruanyifeng.com/blog/2015/12/gi</description>
    </item>
    
    <item>
      <title>Centrifugo（七）Server HTTP API</title>
      <link>https://rjguanwen.cn/2019/12/centrifugo_07/</link>
      <pubDate>Wed, 18 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://rjguanwen.cn/2019/12/centrifugo_07/</guid>
      <description>&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;HTTP API 是最常用的向 Centrifugo 发送指令的一种方式。本文专门讲解 HTTP API。 Centrifugo API 的 url 为 /api/。如果你的 Centrifugo 服务域名是 https://centrifugo.</description>
    </item>
    
    <item>
      <title>Centrifugo（六）引擎（Engines）</title>
      <link>https://rjguanwen.cn/2019/12/centrifugo_06/</link>
      <pubDate>Wed, 18 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://rjguanwen.cn/2019/12/centrifugo_06/</guid>
      <description>&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;Centrifugo 引擎负责如何发布消息、处理订阅、状态及历史数据的保存及恢复等。 &amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;Centrifugo 可选的引擎为 Memory 和 Redis，默认使用 Memory。两者最大的不同在于，Me</description>
    </item>
    
    <item>
      <title>上传本地文件到git</title>
      <link>https://rjguanwen.cn/2019/12/git_02/</link>
      <pubDate>Tue, 17 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://rjguanwen.cn/2019/12/git_02/</guid>
      <description>1、创建本地仓库 cd 到相应文件夹 仓库初始化： git init 将文件添加到仓库： git add . 提交文件到仓库： git commit -m &amp;quot;xxxxxxx&amp;quot; 2、关联 github 仓库 添加远程仓库： git remote add origin https://github.com/rjguanwen/xxxx.git 合并本地</description>
    </item>
    
    <item>
      <title>Centrifugo（三）安装与启动</title>
      <link>https://rjguanwen.cn/2019/12/centrifugo_03/</link>
      <pubDate>Thu, 12 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://rjguanwen.cn/2019/12/centrifugo_03/</guid>
      <description>一、下载安装程序 &amp;ensp;&amp;ensp;Centrifugo 使用 Go 语言开发，GO 语言可以将应用程序编译为单一的二进制执行文件，并且具备交叉编译的能力。因此，Centrifugo 可以方</description>
    </item>
    
    <item>
      <title>Centrifugo（二）基本使用</title>
      <link>https://rjguanwen.cn/2019/12/centrifugo_02/</link>
      <pubDate>Thu, 12 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://rjguanwen.cn/2019/12/centrifugo_02/</guid>
      <description>Centrifugo 是一个用 Golang 实现的基于 Websocket 或者 SockJS 的实时通信平台。 基本运行框架： Centrifugo 的使用场景一般涉及三个部分：客户端（前端）、应用程序（后端）和 Centrifu</description>
    </item>
    
    <item>
      <title>Centrifugo（五）频道（Channel）</title>
      <link>https://rjguanwen.cn/2019/12/centrifugo_05/</link>
      <pubDate>Thu, 12 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://rjguanwen.cn/2019/12/centrifugo_05/</guid>
      <description>&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;频道（Channel）是消息发布的通道。客户端通过订阅频道来接收与频道相关的事件，包括发布到</description>
    </item>
    
    <item>
      <title>Centrifugo（四）配置文件说明</title>
      <link>https://rjguanwen.cn/2019/12/centrifugo_04/</link>
      <pubDate>Thu, 12 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://rjguanwen.cn/2019/12/centrifugo_04/</guid>
      <description>&amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;Centrifugo 支持 JSON、TOML和YAML三种格式的配置文件。 &amp;ensp;&amp;ensp;&amp;ensp;&amp;ensp;通过 ./centrifugo -h 命令，可以查看所有的可用选型，</description>
    </item>
    
    <item>
      <title>Centrifugo（一）简介</title>
      <link>https://rjguanwen.cn/2019/12/centrifugo_01/</link>
      <pubDate>Wed, 11 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://rjguanwen.cn/2019/12/centrifugo_01/</guid>
      <description>Centrifugo 是一个用 Golang 实现的基于 Websocket 或者 SockJS 的实时通信平台。 提供基于频道的发布/订阅（PUB/SUB）模式。 容易和现有系统集成– 不改变已有后端情况下为系统</description>
    </item>
    
    <item>
      <title>数据加解传输过程</title>
      <link>https://rjguanwen.cn/2019/11/data_translet_safely/</link>
      <pubDate>Tue, 26 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://rjguanwen.cn/2019/11/data_translet_safely/</guid>
      <description>数据传输加密流程：</description>
    </item>
    
    <item>
      <title>gomod使用记录</title>
      <link>https://rjguanwen.cn/2019/11/gomod_use/</link>
      <pubDate>Thu, 21 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://rjguanwen.cn/2019/11/gomod_use/</guid>
      <description>简单记录 go mod 的使用方式： 代理配置 $env:GOPROXY = &amp;quot;https://goproxy.io&amp;quot; 或使用 goproxy.cn 初始化 go mod init ***，***为你要创建的mod名字，直接为工程名即可 自动下载依赖 go run *****.</description>
    </item>
    
    <item>
      <title>govendor使用记录</title>
      <link>https://rjguanwen.cn/2019/11/govendor_use/</link>
      <pubDate>Thu, 21 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://rjguanwen.cn/2019/11/govendor_use/</guid>
      <description>简单记录 govendor 的使用方式： 安装 go get -u -v github.com/kardianos/govendor 初始化 vendor 目录 govendor init 添加依赖包到 vendor 目录 govendor add +external 或 govendor add +e 从 $GOPATH 更新依赖包到 vendor 目录 govendor update +vendor 删除依赖包 govendor remove +vendor 常用的命令如</description>
    </item>
    
    <item>
      <title>git错误解决</title>
      <link>https://rjguanwen.cn/2019/11/git_01/</link>
      <pubDate>Wed, 20 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://rjguanwen.cn/2019/11/git_01/</guid>
      <description>pull仓库时：refusing to merge unrelated histories 问题原因： 在远端已经建立好了仓库，在本地又 init 了一个仓库，然后使用 git remote add origin xxxxx 添加远端，之后进行pull</description>
    </item>
    
  </channel>
</rss>
