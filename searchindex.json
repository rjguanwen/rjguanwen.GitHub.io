{"categories":[{"title":"Centrifugo","uri":"https://rjguanwen.cn/categories/centrifugo/"},{"title":"GIT","uri":"https://rjguanwen.cn/categories/git/"},{"title":"GOLANG","uri":"https://rjguanwen.cn/categories/golang/"},{"title":"杂七杂八","uri":"https://rjguanwen.cn/categories/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/"},{"title":"系统架构","uri":"https://rjguanwen.cn/categories/%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/"},{"title":"诗词","uri":"https://rjguanwen.cn/categories/%E8%AF%97%E8%AF%8D/"}],"posts":[{"content":" 一、下载安装程序 \u0026ensp;\u0026ensp;Centrifugo 使用 Go 语言开发，GO 语言可以将应用程序编译为单一的二进制执行文件，并且具备交叉编译的能力。因此，Centrifugo 可以方便的编译为各个平台的执行程序。Centrifugo 安装首先根据操作系统获取最新版本的安装程序（lastest release）。\n二、生成配置文件 \u0026ensp;\u0026ensp;Centrifugo 运行需要依赖配置文件，配置文件可以通过命令自动生成：\n./centrifugo genconfig  以上命令，会在当前目录生成一个 config.json 文件，其中包含自动生成的 secret key，你可以根据自己的喜好对其进行修改。\n三、运行 Centerfugo ./centrifugo --config=config.json  四、检查配置文件 ./centrifugo checkconfig --config=config.json  当配置文件出现问题时，可以使用该命令检查。\n","id":0,"section":"posts","summary":"一、下载安装程序 \u0026ensp;\u0026ensp;Centrifugo 使用 Go 语言开发，GO 语言可以将应用程序编译为单一的二进制执行文件，并且具备交叉编译的能力。因此，Centrifugo 可以方","tags":["技术","Centrifugo"],"title":"Centrifugo（三）安装与启动","uri":"https://rjguanwen.cn/2019/12/centrifugo_03/","year":"2019"},{"content":"Centrifugo 是一个用 Golang 实现的基于 Websocket 或者 SockJS 的实时通信平台。\n基本运行框架：\nCentrifugo 的使用场景一般涉及三个部分：客户端（前端）、应用程序（后端）和 Centrifugo。当然，也可以只有客户端和 Centrifugo。基本使用流程如下：\n 下载并安装Centrifugo，推荐使用 docker 方式。\n 创建基础配置文件，设置 secret 和 api_key。配置文件（config.json）可以通过命令自动创建： ./centrifugo genconfig\n 在后端应用程序中设置三个变量：Centrifugo secret、Centrifugo API Key、Centrifugo API address。Centrifugo secret 和 Centrifugo API Key 来自配置文件，Centrifugo API address 默认为 http://localhost:8000/api。Centrifugo secret 和 Centrifugo API Key 是关键信息，不能泄露到客户端。\n 根据客户端语言下载相应的客户端库（支持的客户端库列表）。客户端库中有连接到 Centrifugo 的方法。在连接时，客户端需要提供令牌（Token JWT）。令牌的生成应该在应用程序后端进行，然后提供给客户端，可以考虑在用户登录成功时生成令牌给客户端或者提供令牌获取服务供已登录的客户端调用。令牌的生成需要依赖 Centrifugo secret。 客户端库一般都有 setToken 方法供使用。\n 客户端连接到 Centrifugo 后，即可根据需要订阅相关的渠道（Channel）。所有的客户端库都提供了处理所订阅渠道（Channel）消息的方法。\n 以上完成后，应用程序后端则可将实时消息发布到相应的渠道（Channel）。消息的推送可以通过 Centrifugo HTTP API 来完成，官方针对不同的编程语言提供了一些 API 库（API libraries），使用这些库可以方便的发布消息到指定的渠道（Channel）。当然，你也可以根据API 描述编写自己的 API 库。发布到渠道的消息会被投递到订阅相应渠道的客户端。\n 为了方便在生产环境中安装 Centrifugo，官方提供了 Docker 镜像、rpm 包以及 deb 包。\n 详细参考资料地址。\n  ","id":1,"section":"posts","summary":"Centrifugo 是一个用 Golang 实现的基于 Websocket 或者 SockJS 的实时通信平台。 基本运行框架： Centrifugo 的使用场景一般涉及三个部分：客户端（前端）、应用程序（后端）和 Centrifu","tags":["技术","Centrifugo"],"title":"Centrifugo（二）基本使用","uri":"https://rjguanwen.cn/2019/12/centrifugo_02/","year":"2019"},{"content":"\u0026ensp;\u0026ensp;\u0026ensp;\u0026ensp;Centrifugo 支持 JSON、TOML和YAML三种格式的配置文件。本文以 JSON 格式为例说明 Centrifugo 配置文件的内容。最简单的配置文件如下：\n{ \u0026quot;secret\u0026quot;: \u0026quot;very-long-secret-key\u0026quot; }  只有 secret 是必须的，在生产环境你应该将该参数设置的足够复杂并且避免外泄。唯二的需要知道这个参数值的只有 Centrifugo 自身和你的应用程序后端。该值被用来生成客户端连接令牌、调用 API 以及订阅私有渠道。\n\u0026ensp;\u0026ensp;\u0026ensp;\u0026ensp;connection_lifetime 参数用来设置客户端连接的过期时间，单位为秒。如果该参数设置为0，表示该客户端连接永不过期。\n{ \u0026quot;secret\u0026quot;: \u0026quot;very-long-secret-key\u0026quot;, \u0026quot;connect_lifetime\u0026quot;: 0 }  \n\u0026ensp;\u0026ensp;\u0026ensp;\u0026ensp;我们重点关注以下与渠道（Channel）相关的几个参数。渠道以字符串进行标识，客户端通过订阅渠道来获取发布到渠道中的实时消息。配置文件中的一些参数会影响到渠道的行为：\n watch：Centrifugo 会同时发生消息到 admin channel，这些消息可以在 admin 管理界面的 messages tab 下查看。这个参数要慎用，特别是针对消息发布频率比较高的渠道，以免超出 admin client 的处理能力。本参数默认值为 fasle。\n publish：允许客户端直接发布消息到渠道，而不经过应用程序后端。一般情况下，消息都是由应用程序后端通过 Centrifugo API 发布到 Centrifugo 服务器的。这个参数适用于没有后端或者 demo 的快速构建。需要注意的一点是客户端只有成功订阅了渠道之后才能发布消息到该渠道。本参数默认值为 false。\n anonymous：该参数允许匿名访问（在连接参数中使用空字符串作为 user ID，JWT token 中 sub 为空）。通常情况下，应用程序的用户都需要登录认证，因此客户端建立连接时可以使用用户名作为标识。如果你需要提供公共的实时消息服务，你可以在相应的渠道上开启本参数。本参数默认值为 false。\n presence：是否可查看当前渠道的连接信息，即客户端对本渠道的订阅信息。本参数默认是为 false。\n join_leave：当有用户订阅/取消订阅渠道时，是否发送相关信息到渠道中。本参数默认值为 false。\n history_size：渠道历史消息数量。因为 Centrifugo 将所有的消息存储在内存中，因此限制每个渠道保留的历史消息数量是非常重要的。本参数默认值为 0，这意味着渠道不会保留历史消息。启用本参数后，Centrifugo 会为命名空间中的每条渠道保留指定数量的历史消息，直到消息过期，关于消息过期详见参数 history_lifetime。\n history_lifetime：渠道历史消息的过期时间，单位为秒。本参数默认值为 0，这意味着渠道不会保留历史消息。如果要保留历史消息，需要同时配置 history_size 与 history_lifetime，并设置合理的参数值。\n recover：是否恢复丢失的消息。如果开启本参数，当客户端重新连接时（如因网络原因断线重连），Centrifugo 将试图重新恢复丢失的消息。这个参数的启用要配合历史消息相关参数（history_size 和 histroy_lifetime），毕竟消息的恢复依靠的是渠道历史消息记录。注意，所有实时事件都需要启用此功能。本参数默认值为 false。\n history_drop_inactive：是否丢弃不活跃的历史消息。本参数可以大幅降低资源消耗（内存、消息传播次数）。简单来说，该参数开启后，Centrifugo 会主动丢弃不需要的历史消息。本参数默认值为 false。\n namespaces：namespaces 是可选参数，如果设置的话，需要设置成 namespace 数组的形式。通过 namespaces 可以针对 namespace 下的渠道配置自定义参数。每个 namespace 都有自己的 name，并且拥有上面所有的针对渠道的参数。name 必须唯一，并且由字母、数字、下划线或连接符组成，长度必须大于2（^[-azA-Z0-9_]{2,}$）。\n  配置文件示例：\n{ \u0026quot;admin\u0026quot;: true, \u0026quot;port\u0026quot;: 8000, \u0026quot;secret\u0026quot;:\u0026quot;very-long-secret-key\u0026quot;, \u0026quot;admin_password\u0026quot;:\u0026quot;very-long-admin-password\u0026quot;, \u0026quot;admin_secret\u0026quot;:\u0026quot;very-long-admin-secret\u0026quot;, \u0026quot;api_key\u0026quot;:\u0026quot;very-long-api-key\u0026quot;, \u0026quot;connection_lifetime\u0026quot;: 0, \u0026quot;debug\u0026quot;: true, \u0026quot;presence\u0026quot;: true, \u0026quot;history_size\u0026quot;: 50, \u0026quot;history_lifetime\u0026quot;: 600, \u0026quot;publish\u0026quot;: true, \u0026quot;anonymous\u0026quot;: true, \u0026quot;subscribe_to_publish\u0026quot;: true, \u0026quot;join_leave\u0026quot;: true, \u0026quot;history_recover\u0026quot;: true, \u0026quot;log_file\u0026quot;: \u0026quot;D:/tmp/centrifugo.log\u0026quot;, \u0026quot;log_level\u0026quot;: \u0026quot;debug\u0026quot;, \u0026quot;engine\u0026quot;: \u0026quot;redis\u0026quot;, \u0026quot;redis_host\u0026quot;: \u0026quot;127.0.0.1\u0026quot;, \u0026quot;redis_port\u0026quot;: \u0026quot;6379\u0026quot;, \u0026quot;redis_db\u0026quot;: \u0026quot;12\u0026quot;, \u0026quot;redis_password\u0026quot;: \u0026quot;123456a?\u0026quot;, \u0026quot;namespaces\u0026quot;:[ { \u0026quot;name\u0026quot;:\u0026quot;public\u0026quot;, \u0026quot;anonymous\u0026quot;:true, \u0026quot;publish\u0026quot;:true, \u0026quot;presence\u0026quot;:true, \u0026quot;join_leave\u0026quot;:true, \u0026quot;history_size\u0026quot;:10, \u0026quot;history_lifetime\u0026quot;:30, \u0026quot;history_recover\u0026quot;:true }, { \u0026quot;name\u0026quot;: \u0026quot;gossips\u0026quot;, \u0026quot;watch\u0026quot;: true } ] }  在以上配置下：\n\u0026ensp;\u0026ensp;- 渠道 news 将使用全局参数配置。\n\u0026ensp;\u0026ensp;- 渠道 public:news 将使用 public 命名空间的参数配置。\n\u0026ensp;\u0026ensp;- 渠道 gossips:news 将使用 gossips 命名空间的参数配置。\n通过 ./centrifugo -h 命令，可以查看所有的可用参数，如下：\n Centrifugo – real-time messaging server Usage: [flags] [command] Available Commands: checkconfig Check configuration file genconfig Generate simple configuration file to start with help Help about any command version Centrifugo version information Flags: -a, --address string interface address to listen on 服务的地址 --admin enable admin web interface 是否开启admin的管理界面 --admin_insecure use insecure admin mode – no auth required for admin socket admin安全验证, 节点: /, 可直接访问admin管理界面, 默认为false, 登录admin需要admin_password, 反之可直接登录 --api_insecure use insecure API mode 后台推送安全验证, 节点: /api. 默认为 false, 此时访问节点需要api_key. 当设置为 true 后, 任何人都将可以访问此节点 --client_insecure start in insecure client mode 客户端是否需要安全验证, 默认为false, 客户端必须拥有 JWT token 才能访问 -c, --config string path to config file (default \u0026quot;config.json\u0026quot;) --debug enable debug endpoints 是否开启dubug节点, 开启后可访问 /debug/pprof/ 查看一些Centrifugo的网络状态 -e, --engine string engine to use: memory or redis (default \u0026quot;memory\u0026quot;) 消息存储引擎, 默认为内存, 部署多个实例会造成数据不同步, 因此推荐使用 redis --grpc_api enable GRPC API server 是否开启grpc api, 默认使用 http_api -h, --help help for this command --internal_port string custom port for internal endpoints 开启自定义默认端口, 默认为8000, 开启额外的端口为admin访问 --log_file string optional log file - if not specified logs go to STDOUT log输出文件 --log_level string set the log level: debug, info, error, fatal or none (default \u0026quot;info\u0026quot;) log级别 -n, --name string unique node name 命名空间名称, 此空间下的属性会覆盖common部分, 但不会继承 --pid_file string optional path to create PID file -p, --port string port to bind HTTP server to (default \u0026quot;8000\u0026quot;) 服务端口号 --prometheus enable Prometheus metrics endpoint --redis_db int Redis database (Redis engine) --redis_host string Redis host (Redis engine) (default \u0026quot;127.0.0.1\u0026quot;) --redis_master_name string name of Redis master Sentinel monitors (Redis engine) --redis_password string Redis auth password (Redis engine) --redis_port string Redis port (Redis engine) (default \u0026quot;6379\u0026quot;) --redis_sentinels string comma-separated list of Sentinel addresses (Redis engine) --redis_tls enable Redis TLS connection --redis_tls_skip_verify disable Redis TLS host verification --redis_url string Redis connection URL in format redis://:password@hostname:port/db (Redis engine) --tls enable TLS, requires an X509 certificate and a key file --tls_cert string path to an X509 certificate file --tls_key string path to an X509 certificate key  ","id":2,"section":"posts","summary":"\u0026ensp;\u0026ensp;\u0026ensp;\u0026ensp;Centrifugo 支持 JSON、TOML和YAML三种格式的配置文件。本文以 JSON 格式为例说明 Centrifugo 配置文件的内容。最简单的配置文件如下： { \u0026quot;secret\u0026quot;: \u0026quot;very-long-secret-key\u0026quot; } 只有 secret 是必须的，在","tags":["技术","Centrifugo"],"title":"Centrifugo（四）配置文件说明","uri":"https://rjguanwen.cn/2019/12/centrifugo_04/","year":"2019"},{"content":"Centrifugo 是一个用 Golang 实现的基于 Websocket 或者 SockJS 的实时通信平台。\n 提供基于频道的发布/订阅（PUB/SUB）模式。\n 容易和现有系统集成– 不改变已有后端情况下为系统提供实时通信能力。\n HTTP API 和已有后端通信 . API clients for Python, Ruby, PHP, Go, NodeJS。\n 浏览器可以通过SockJS或者纯粹Websocket协议和centrifugal通信。 提供 iOS和Android平台SDK。\n 采用Redis实现分布式部署，也支持使用Memory引擎单机简单部署。\n SHA-256 HMAC连接认证和隐私保护。\n 多种类型的频道 – 私有, 用户限制，客户端限制。\n 通过名字空间灵活配置频道。\n 支持即时消息和历史消息。\n 支持用户加入/离开消息。\n 网络重连后可以恢复消息。\n 内置管理界面，提供多种计量(Metrics)。\n 可用于WebRTC信令服务器。\n 多种部署手段(docker 镜像, RPM/DEB 包, Nginx 配置, TLS certificates)。\n MIT license。\n  基本运行框架：\n​ Centrifugo 作为独立服务器运行，可以处理来自应用程序用户的持久连接。应用的前端和后端可以基于任何语言进行开发。你的客户端使用应用程序后端提供的令牌(Token JWT)连接到 Centrifugo，并订阅频道（Channel）。当有事件发生时，后端应用可以使用 Centrifugo 的 API 发布消息到相关 Channel。随后，消息会被投递到所有订阅本 Channel 的客户端。\n项目地址：https://github.com/centrifugal/centrifugo\n","id":3,"section":"posts","summary":"Centrifugo 是一个用 Golang 实现的基于 Websocket 或者 SockJS 的实时通信平台。 提供基于频道的发布/订阅（PUB/SUB）模式。 容易和现有系统集成– 不改变已有后端情况下为系统","tags":["技术","Centrifugo"],"title":"Centrifugo（一）简介","uri":"https://rjguanwen.cn/2019/12/centrifugo_01/","year":"2019"},{"content":"摘抄并总结几条个人认为对提升自我帮助较大的好习惯，希望能坚持！\n\u0026lt;部分内容摘抄自网络，如有侵权，预先道歉，请及时联系（rjguanwen001@163.com），我会尽快删除，谢谢！\u0026gt;\n 心情糟糕时认真清理房间，心情莫名就开始清爽起来。\n 晨起刷牙时问问自己，如果要过好这一天，有什么可改良创造之处。\n 出差、旅行，记得带上一双跑鞋，一身运动服，去陌生城市的清晨跑个步，或许收获新的灵感。\n 睡前半小时远离手机和任何电子设备。\n 戒糖，戒所有含糖饮料，将可口可乐改为零度可乐等无糖甜味饮料。\n 当出现负面情绪和自我否定时，想办法转移自己的负面情绪，听增强自信的音乐，或者看励志书籍/电源。\n 误解或伤害过他人，一定要专门去道歉和解释。\n 每天问问自己，最重要的人，最重要的事情，最重要的目标，到底是什么；对那些不重要的人、事、物，尽可能少分配精力。\n 给人第二次机会，但不要给第三次。圣经上说过：凡第二次犯错者，必有第三次。 受人恩惠后除了说声谢谢，再赠送一件小礼品，可以结识到更亲密的关系。\n 建立自己的日常事项，比如日常写日记，日常有氧健身半小时，用恒定不变的习惯，抵抗人生的无常。会建立自信，缓解焦虑。\n 坚持阅读，家里准备着可以读的书，保证每天有一定的阅读时间，和利用碎片化时间阅读。\n 坚持记账，让你对自己的收入和消费情况充分了解，更有利于帮助你纠正不良消费习惯，管理好自己的财物状况。\n 吃饭不要吃太饱，八分饱更健康。\n 早睡早起，感觉精力充沛的时间更多。\n 洗手间内、公司走廊上不要和别人过多交流。\n 对方正在说话的时候不要插嘴。\n 正式去别人家里一定不要空手去！无论你们关系有多好！\n 使用积极语言： 当你以积极的语言开始陈述，对方也会摆出积极的姿态倾听你的话语。如果你没有自信，不妨抛开带有感情色彩的开场白，平缓地开始叙述。如果因为多余的客气话和谦虚反而让对方认为你没有能力，那就得不偿失了。\n 遇事少抱怨！万事健康第一！\n 宁可鱼死网破，也绝不降低原则与底限。\n 坚持反省： 每天晚上进行一次对自己今天所做事情的冥想，不管做的好还是不好，都去总结分析其缘由。 坚持运动： 无论你多么优秀、多么地与众不同，你都有责任为自己的身体负责。\n 不要说脏话，戒掉口头禅！\n  ","id":4,"section":"posts","summary":"摘抄并总结几条个人认为对提升自我帮助较大的好习惯，希望能坚持！ \u0026lt;部分内容摘抄自网络，如有侵权，预先道歉，请及时联系（rjguanwen","tags":["个人"],"title":"坚持好习惯","uri":"https://rjguanwen.cn/2019/11/good_habits/","year":"2019"},{"content":"数据传输加密流程：\n","id":5,"section":"posts","summary":"数据传输加密流程：","tags":["技术"],"title":"数据加解传输过程","uri":"https://rjguanwen.cn/2019/11/data_translet_safely/","year":"2019"},{"content":"简单记录 go mod 的使用方式：\n 代理配置\n$env:GOPROXY = \u0026quot;https://goproxy.io\u0026quot; 或使用 goproxy.cn\n 初始化\ngo mod init ***，***为你要创建的mod名字，直接为工程名即可\n 自动下载依赖\ngo run *****.go，在执行前会首先查找并下载安装依赖\n 更新旧的 package import 方式，内部依赖也需要增加 mod 名\npackage main import ( api \u0026quot;mymod/api\u0026quot; // mymod 是初始化的 mod 名 \u0026quot;github.com/labstack/echo\u0026quot; ) func main() { e := echo.New() e.GET(\u0026quot;/\u0026quot;, api.MyAPI) e.Logger.Fatal(e.Start(\u0026quot;:1234\u0026quot;)) }  使用 replace 替换无法直接获取的 package\nreplace ( golang.org/x/crypto v0.0.0-20190313024323-a1f597ede03a =\u0026gt; github.com/golang/crypto v0.0.0-20190313024323-a1f597ede03a )  检查并升级 package\ngo list -m -u all\ngo get -u need-upgrade-package 或者 go get -u\n  常用的命令如下：\n   命令 功能     download 下载依赖包   edit 编辑 go.mod   graph 打印模块依赖图   init 初始化 mod   tidy 拉取缺少的模块，移除不用的模块   vendor 将依赖复制到 vendor 下   verify 验证依赖是否正确   why 解释为什么需要依赖    ","id":6,"section":"posts","summary":"简单记录 go mod 的使用方式： 代理配置 $env:GOPROXY = \u0026quot;https://goproxy.io\u0026quot; 或使用 goproxy.cn 初始化 go mod init ***，***为你要创建的mod名字，直接为工程名即可 自动下载依赖 go run *****.","tags":["技术","GOLANG"],"title":"gomod使用记录","uri":"https://rjguanwen.cn/2019/11/gomod_use/","year":"2019"},{"content":"简单记录 govendor 的使用方式：\n 安装\ngo get -u -v github.com/kardianos/govendor\n 初始化 vendor 目录\ngovendor init\n 添加依赖包到 vendor 目录\ngovendor add +external 或 govendor add +e\n 从 $GOPATH 更新依赖包到 vendor 目录\ngovendor update +vendor\n 删除依赖包\ngovendor remove +vendor\n  常用的命令如下：\n   命令 功能     init 初始化 vendor 目录   list 列出所有依赖包   add 添加包到 vendor 目录   add PKG_PATH 添加指定依赖包到 vendor 目录   update 从 $GOPATH 更新依赖包到 vendor 目录   remove 从 vendor 管理中删除依赖   status 列出 vendor 管理的各个包的状态   fetch 添加或更新包到 vendor 目录   sync 同步，基于已存在的 vendor.json 拉取依赖包   get 类似 go get ，拉取依赖包到 vendor 目录    可用的 Status Types 如下：\n+local (l) packages in your project\n+external (e) referenced packages in GOPATH but not in current project\n+vendor (v) packages in the vendor folder\n+std (s) packages in the standard library\n+excluded (x) external packages explicitly excluded from vendoring\n+unused (u) packages in the vendor folder, but unused\n+missing (m) referenced packages but not found\n+program (p) package is a main package\n+outside +external +missing\n+all +all packages\n注意事项：\n使用 vendor 后，请配置 .gitignore 文件：\n/vendor/* !/vendor/vendor.json  ","id":7,"section":"posts","summary":"简单记录 govendor 的使用方式： 安装 go get -u -v github.com/kardianos/govendor 初始化 vendor 目录 govendor init 添加依赖包到 vendor 目录 govendor add +external 或 govendor add +e 从 $GOPATH 更新依赖包到 vendor 目录 govendor update +vendor 删除依赖包 govendor remove +vendor 常用的命令如","tags":["技术","GOLANG"],"title":"govendor使用记录","uri":"https://rjguanwen.cn/2019/11/govendor_use/","year":"2019"},{"content":" pull仓库时：refusing to merge unrelated histories 问题原因： 在远端已经建立好了仓库，在本地又 init 了一个仓库，然后使用 git remote add origin xxxxx 添加远端，之后进行pull，此时在较新的git版本上会报错。因为git认为两个仓库可能不是同一个，报错是为了防止开发者上传错误。\n解决办法： 在 pull 命令的最后增加--allow-unrelated-histories\n","id":8,"section":"posts","summary":"pull仓库时：refusing to merge unrelated histories 问题原因： 在远端已经建立好了仓库，在本地又 init 了一个仓库，然后使用 git remote add origin xxxxx 添加远端，之后进行pull","tags":["技术","GIT"],"title":"git错误解决","uri":"https://rjguanwen.cn/2019/11/git_01/","year":"2019"},{"content":" 技术的发展非常迅速，对新技术的探索与应用和  ","id":9,"section":"posts","summary":"技术的发展非常迅速，对新技术的探索与应用和","tags":["杂感随笔"],"title":"关于产品与技术的一些想法","uri":"https://rjguanwen.cn/2019/11/any_01/","year":"2019"},{"content":"1.读书不是为了雄辩与驳斥，也不是为了轻信与盲从，而是为了思考和权衡。很多人觉得他们在思考，而实际上他们是在重新整理自己的偏见。\n2.用一套程序保证问题会摆在桌面上，同时确保问题根源会得到剖析，这样才能实现持续的改进。\n3.\n","id":10,"section":"posts","summary":"1.读书不是为了雄辩与驳斥，也不是为了轻信与盲从，而是为了思考和权衡。很多人觉得他们在思考，而实际上他们是在重新整理自己的偏见。 2.用一套程","tags":["句子"],"title":"杂句摘抄","uri":"https://rjguanwen.cn/2019/11/somewords_01/","year":"2019"},{"content":"苦昼短\n【唐】李贺\n飞光飞光，劝尔一杯酒。\n吾不识青天高，黄地厚。\n唯见月寒日暖，来煎人寿。\n食熊则肥，食蛙则瘦。\n神君何在？太一安有？\n天东有若木，下置衔烛龙。\n吾将斩龙足，嚼龙肉，使之朝不得回，夜不得伏。\n自然老者不死，少者不哭。\n何为服黄金、吞白玉？\n谁似任公子，云中骑碧驴？\n刘彻茂陵多滞骨，嬴政梓棺费鲍鱼。\n","id":11,"section":"posts","summary":"苦昼短 【唐】李贺 飞光飞光，劝尔一杯酒。 吾不识青天高，黄地厚。 唯见月寒日暖，来煎人寿。 食熊则肥，食蛙则瘦。 神君何在？太一安有？ 天东有若木，下置","tags":["光阴","诗词"],"title":"苦昼短","uri":"https://rjguanwen.cn/2019/11/art-1/","year":"2019"}],"tags":[{"title":"Centrifugo","uri":"https://rjguanwen.cn/tags/centrifugo/"},{"title":"GIT","uri":"https://rjguanwen.cn/tags/git/"},{"title":"GOLANG","uri":"https://rjguanwen.cn/tags/golang/"},{"title":"个人","uri":"https://rjguanwen.cn/tags/%E4%B8%AA%E4%BA%BA/"},{"title":"光阴","uri":"https://rjguanwen.cn/tags/%E5%85%89%E9%98%B4/"},{"title":"句子","uri":"https://rjguanwen.cn/tags/%E5%8F%A5%E5%AD%90/"},{"title":"技术","uri":"https://rjguanwen.cn/tags/%E6%8A%80%E6%9C%AF/"},{"title":"杂感随笔","uri":"https://rjguanwen.cn/tags/%E6%9D%82%E6%84%9F%E9%9A%8F%E7%AC%94/"},{"title":"诗词","uri":"https://rjguanwen.cn/tags/%E8%AF%97%E8%AF%8D/"}]}